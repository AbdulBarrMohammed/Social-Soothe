// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  username String
  password String
  gender   String
  Journals Journal[]
  water    Int
  plants   Plant[]

  // WILL ADD IF APP GROWS
  //conversations Conversation[]
  //conversationIds String[]
  //messages Message[]
  //posts Post[]
  //likes Post[] @relation("likedPosts")
}

//model Post {
//  id String @id @default(uuid())
//  title String
//  feeling String
// createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt
//  author User @relation(fields: [authorId], references: [id])
//  authorId String
//  likedBy User? @relation("likedPosts", fields: [likedById], references: [id])
//  likedById String?

//}

//model Conversation {
//  id String @id @default(uuid())
//  createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt

//  participantsIds String[]
//  participants User[]

//  messageIds String[]
//  messages Message[]

//}

//model Message {
//  id String @id @default(uuid())
//  conversationId String
//  conversation Conversation @relation(fields:[conversationId], references: [id])

//  senderId String
// sender User @relation(fields: [senderId], references: [id])

//  body String
//  createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt

//}

model Journal {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  text      String
  mood      String
}

model Plant {
  id       String @id @default(uuid())
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}
